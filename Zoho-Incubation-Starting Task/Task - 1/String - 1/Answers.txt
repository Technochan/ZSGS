helloName
public String helloName(String name) {
  return "Hello "+name+"!";
}


makeAbba
public String makeAbba(String a, String b) {
  return a+b+b+a;
}


makeTags
public String makeTags(String tag, String word) {
  return "<"+tag+">"+word+"</"+tag+">";
}

makeOutWord
public String makeOutWord(String out, String word) {
  return out.substring(0,2)+word+out.substring(2,out.length());
}

extraEnd
public String extraEnd(String str) {
  String result = str.substring(str.length()-2,str.length());
  return result+result+result;
}

firstTwo
public String firstTwo(String str) {
  if(str.length()<3) return str;
  return str.substring(0,2);
}

firstHalf
public String firstHalf(String str) {
  return str.substring(0,str.length()/2);
}

withoutEnd
public String withoutEnd(String str) {
  if(str.length()<3) return "";
  return str.substring(1,str.length()-1);
}

comboString
public String comboString(String a, String b) {
  if(a.length() < b.length()) return a+b+a;
  return b+a+b;
}

nonStart
public String nonStart(String a, String b) {
  return a.substring(1,a.length())+b.substring(1,b.length());
}

left2
public String left2(String str) {
  if(str.length()<3) return str;
  return str.substring(2,str.length())+str.substring(0,2);
}

right2
public String right2(String str) {
  if(str.length()<3) return str;
  return str.substring(str.length()-2,str.length())+str.substring(0,str.length()-2);
}

theEnd
public String theEnd(String str, boolean front) {
  if(!front) return str.charAt(str.length()-1)+"";
  return str.charAt(0)+"";
}

withouEnd2
public String withouEnd2(String str) {
  if(str.length()<3) return "";
  return str.substring(1,str.length()-1);
}


middleTwo
public String middleTwo(String str) {
  if(str.length() < 3 ) return str;
  int mid = str.length()/2;
  return str.substring(mid-1,mid+1);
}


endsLy
 return str.endsWith("ly");
  
  // else 
  if(str.length() < 2) return false;
  return str.substring(str.length()-2,str.length()).equals("ly");


nTwice
public String nTwice(String str, int n) {
  return str.substring(0,n)+str.substring(str.length()-n,str.length());
}


twoChar
public String twoChar(String str, int index) {
  if(index < 0 || str.length()-index < 2) return str.substring(0,2);
  return str.substring(index,index+2);
}


middleThree
public String middleThree(String str) {
  if(str.length() == 3) return str;
  int mid = str.length()/2;
  return str.substring(mid-1,mid+2);
}


hasBad
public boolean hasBad(String str) {
  if(str.length() < 3 ) return false;
  String checkingPart = str.length() == 3 ? str : str.substring(0,3); 
  return checkingPart.contains("bad") || (str.length() != 3 && checkingPart.contains("ba"))  ;
}


atFirst
public String atFirst(String str) {
  if(str.length() >= 3) return str.substring(0,2);
  else if(str.length() == 2) return str;
  else if (str.length() == 1) return str+"@";
  
  return "@@";
}


lastChars
public String lastChars(String a, String b) {
  if(a.length() >= 1 && b.length() > 1) return a.charAt(0)+""+b.charAt(b.length()-1);
  if(a.length() >= 1  && b.length() <= 1) return a.charAt(0)+"@" ;
  if(a.length() == 0 && b.length() >=1) return "@"+b.charAt(b.length()-1);
  return "@@";
}


conCat
public String conCat(String a, String b) {
  if(a.length() == 0 || b.length() == 0) return a+b;
  if(a.charAt(a.length()-1) == b.charAt(0)){
    return a.substring(0,a.length()-1)+b.substring(0,b.length());
  }
  return a+b;
}



lastTwo
public String lastTwo(String str) {
  if(str.length()<2) return str;
  return str.substring(0,str.length()-2)+str.charAt(str.length()-1)+str.charAt(str.length()-2);
}


seeColor
public String seeColor(String str) {
  if(str.length()<3) return "";
  else if(str.substring(0,3).equals("red")) return "red";
  else if(str.length()>3 && str.substring(0,4).equals("blue")) return "blue";
  return "";
}


frontAgain
public boolean frontAgain(String str) {
  if(str.length()<2) return false;
  return str.substring(0,2).equals(str.substring(str.length()-2,str.length()));
}


minCat
public String minCat(String a, String b) {
  if(a.length()==0 || b.length()==0) return "";
  if(a.length() > b.length()) return a.substring(a.length()-b.length(),a.length())+b;
  return a+b.substring(b.length()-a.length(),b.length());
}


extraFront
public String extraFront(String str) {
  if(str.length()<=2) return str+str+str;
  String result = str.substring(0,2);
  return result+result+result;
}


without2
public String without2(String str) {
  if(str.length()<2) return str;
  String front = str.substring(0,2);
  if(str.substring(str.length()-2 ,str.length()).equals(front)) return str.substring(2 ,str.length());
  return str;
}


deFront
public String deFront(String str) {    
  String result = "";
  if(str.length()>=2){
    if(str.charAt(0) == 'a') result += str.charAt(0);
    if(str.charAt(1) == 'b') result += str.charAt(1);
  } 
  result += str.substring(2,str.length());
  return result; 
}


withoutX
public String withoutX(String str) {
  if (str.isEmpty()) return "";
  if (str.charAt(0) == 'x')  str = str.substring(1);
  if (!str.isEmpty() && str.charAt(str.length() - 1) == 'x') {
       str = str.substring(0, str.length() - 1);
  }
  return str;
}




withoutX2
public String withoutX2(String str) {
  if(str.length()<1) return "";
  if((str.length() <= 1  && str.charAt(0) == 'x') ||
      ((str.length() >= 2 && str.length() < 3) && 
        (str.charAt(0)=='x' && str.charAt(1) == 'x' ))) return "";
  
  if(str.charAt(0)!='x' && str.charAt(1)=='x') return str.substring(0,1)+str.substring(2,str.length());    
  if(str.charAt(0)=='x' && str.charAt(1)!='x') return str.substring(1,str.length());       
  if(str.charAt(0)=='x' && str.charAt(1)=='x') return str.substring(2,str.length()); 
  
  return str;

}





