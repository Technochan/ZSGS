// try to avoid loops

firstLast6
public boolean firstLast6(int[] nums) {
  return nums[0] == 6 || nums[nums.length-1] == 6 ;
}


sameFirstLast
public boolean sameFirstLast(int[] nums) {
  return  nums.length >= 1  && nums[0] == nums[nums.length-1] ; 
}


makePi
public int[] makePi() {
  return new int[] {3,1,4};
}


commonEnd
public boolean commonEnd(int[] a, int[] b) {
  return a[0] == b[0] || a[a.length-1] == b[b.length-1];
}


sum3
public int sum3(int[] nums) {
  if (nums.length == 1) {
      return nums[0];
  }
  int mid = nums.length / 2;
  int[] left = Arrays.copyOfRange(nums, 0, mid);
  int[] right = Arrays.copyOfRange(nums, mid, nums.length);
        
  return sum3(left) + sum3(right);
}


rotateLeft3
public int[] rotateLeft3(int[] nums) {
  return new int[] {nums[1],nums[nums.length-1],nums[0]};
}


reverse3
public int[] reverse3(int[] nums) {
  swap(nums,0,nums.length-1);
  return nums;
}
private void swap(int arr[] , int start,int end){
  if(start >= end) return;
  
  int temp = arr[start];
  arr[start] = arr[end];
  arr[end] = temp;
  
  swap(arr,start+1,end-1);
}


maxEnd3
public int[] maxEnd3(int[] nums) {
  int num = nums[0] > nums[nums.length-1] ? nums[0] : nums[nums.length-1];
  return new int[] {num,num,num};
  
}


Sum2
public int sum2(int[] nums) {
  if(nums.length < 2){
    if(nums.length < 1) return 0;
    return nums[0];
  }
  return nums[0]+nums[1];
}


middleWay
public int[] middleWay(int[] a, int[] b) {
  return new int[]{a[1],b[1]};
}


makeEnds
public int[] makeEnds(int[] nums) {
  return new int[] {nums[0],nums[nums.length-1]};
}


has23
public boolean has23(int[] nums) {
  return (nums[0] == 2 || nums[1] == 3) || (nums[0] == 3 || nums[1] == 2);
}


no23
public boolean no23(int[] nums) {
    return (nums[0] != 2 && nums[1] != 3) && (nums[0] != 3 && nums[1] != 2);
}


makeLast
public int[] makeLast(int[] nums) {
  int arr[] = new int[nums.length*2];
  arr[arr.length-1] = nums[nums.length-1];
  return arr;
}


double23
public boolean double23(int[] nums) {
  if(nums.length < 2) return false;
  return (nums[0] == 2 && nums[1] == 2) || (nums[0] == 3 && nums[1] == 3);  
}


fix23
public int[] fix23(int[] nums) {
  if(nums[0] == 2 && nums[1] == 3 ) nums[1] = 0;
  if(nums[1] == 2 && nums[2] == 3 ) nums[2] = 0;
  return nums;
}


start1
public int start1(int[] a, int[] b) {
  int count = 0;
  if (a.length > 0 && a[0] == 1) count++;
  if (b.length > 0 && b[0] == 1) count++;
  return count;
}


biggerTwo
public int[] biggerTwo(int[] a, int[] b) {
  return a[0]+a[1] >= b[0]+b[1] ? a : b ;
}


makeMiddle
public int[] makeMiddle(int[] nums) {
  return new int[] {nums[(nums.length/2)-1],nums[nums.length/2]};
}


plusTwo
public int[] plusTwo(int[] a, int[] b) {
  return new int[] {a[0],a[1],b[0],b[1]};
}


swapEnds
public int[] swapEnds(int[] nums) {
  int temp = nums[0];
  nums[0] = nums[nums.length-1];
  nums[nums.length-1] = temp;
  return nums;
}


midThree
public int[] midThree(int[] nums) {
  return new int[] {nums[(nums.length/2)-1],nums[nums.length/2],nums[(nums.length/2)+1] } ;
}


maxTriple
public int maxTriple(int[] nums) {
 int val = nums[0] > nums[nums.length/2] ? nums[0] : nums[nums.length/2];
 return val > nums[nums.length-1] ? val : nums[nums.length-1];
 
 // or use max()
 return Math.max(nums[0] , Math.max(nums[nums.length/2] , nums[nums.length - 1]));
}


frontPiece
public int[] frontPiece(int[] nums) {
  if(nums.length < 3) return nums;
  return new int[] {nums[0],nums[1]};
}


unlucky1	
public boolean unlucky1(int[] nums) {
  if(nums.length < 2) return false;
  return (nums[0] == 1 && nums[1] == 3) ||
         (nums[1] == 1 && nums[2] == 3) ||
         (nums[nums.length-2] == 1 && nums[nums.length-1] == 3) ;
}


make2
public int[] make2(int[] a, int[] b) {
  if(a.length < 1) return new int[] {b[0],b[1]}; 
  if(a.length < 2) return new int[] {a[0],b[0]};
  return new int[] {a[0],a[1]};
}


front11
public int[] front11(int[] a, int[] b) {
  if(a.length < 1 && b.length < 1) return new int[0];
  if(a.length > 1 && b.length < 1) return new int[] {a[0]};
  if(a.length < 1 && b.length > 1) return new int[] {b[0]};
  return new int[]{a[0],b[0]};
}

