sleepIn
public boolean sleepIn(boolean weekday, boolean vacation) {
  if(vacation || !weekday)return true;
  return false;
}


monkeyTrouble
public boolean monkeyTrouble(boolean aSmile, boolean bSmile) {
  if((aSmile && bSmile)||(!aSmile && !bSmile)) return true;
  return false;
}


sumDouble
public int sumDouble(int a, int b) {
  if(a != b) return a+b;
  return (a+b)*2 ;
}


diff21
public int diff21(int n) {
  if(n < 21) return 21 - n;
  return (n-21)*2;
}


parrotTrouble
public boolean parrotTrouble(boolean talking, int hour) {
  if(talking && (hour < 7 || hour > 20)) return true;
  return false;
}


makes10
public boolean makes10(int a, int b) {
  if(a==10 || b== 10|| (a+b == 10)) return true;
  return false;
}


nearHundred
public boolean nearHundred(int n) {
  return (( Math.abs(100 - n) <= 10) || (Math.abs(200 - n) <= 10)) ;
}


posNeg
public boolean posNeg(int a, int b, boolean negative) {
  if( (((b < 0 && a > 0) && !negative) || ((a < 0 && b > 0) && !negative)) || ((a<0 && b<0) && negative) ) return true;
  return false;
}


notString
public String notString(String str) {
  if(str.length() >=3 && (str.substring(0,3).equals("not"))) return str;
  else return "not "+str;
}


missingChar
public String missingChar(String str, int n) {
  return str.substring(0,n)+str.substring(n+1,str.length()) ;
}


frontBack
public String frontBack(String str) {
  if(str.length()<2) return str;
  return str.charAt(str.length()-1)+str.substring(1,str.length()-1)+str.charAt(0);
}


front3
public String front3(String str) {
  if(str.length() < 3) return str+str+str;
  return str.substring(0,3)+str.substring(0,3)+str.substring(0,3);
  
}


backAround
public String backAround(String str) {
    if(str.length() == 1) return str+str+str;
  return str.charAt(str.length()-1)+str+str.charAt(str.length()-1);
}


or35
public boolean or35(int n) {
  return (n % 3 == 0) || (n % 5 == 0);
}


front22
public String front22(String str) {
   if(str.length() < 2) return str+str+str;
  return str.substring(0,2)+str+str.substring(0,2);
}


startHi
public boolean startHi(String str) {
  if(str.length() < 2) return false;
  if(str.substring(0,2).equals("hi")) return true;
  return false;
}


icyHot
public boolean icyHot(int temp1, int temp2) {
  if ((temp1 < 0 && temp2 > 100) || (temp2 < 0 && temp1 > 100) ) return true;
  return false;
}


in1020
public boolean in1020(int a, int b) {
  return ( (a >= 10 && a<=20) || (b >= 10 && b<=20) ) ;
}


hasTeen
public boolean hasTeen(int a, int b, int c) {
    return (a>=13 && a<=19) ||  (b>=13 && b<=19) || (c>=13 && c<=19);
}


loneTeen
public boolean loneTeen(int a, int b) {
  return (a>=13 && a<=19) ^ (b >=13 && b<= 19);
}


delDel
public String delDel(String str) {
  if(str.length() < 4) return str;
  if(str.substring(1,4).equals("del")) return str.charAt(0)+str.substring(4,str.length());
  return str;
}


mixStart
public boolean mixStart(String str) {
  if (str.length() < 3) return false;
  String two = str.substring(1, 3);
  if (two.equals("ix")) {
    return true;
  } else {
    return false;
  }
}


startOz
public String startOz(String str) {
  String result = "";
  if (str.length() >= 1 && str.charAt(0)=='o') result += result + str.charAt(0);
  if (str.length() >= 2 && str.charAt(1)=='z') result += str.charAt(1);
  return result;
}


intMax
public int intMax(int a, int b, int c) {
  int max;
  max = a > b ? a : b ;
  max = max < c ? c : max ;
  return max;
}


close10
public int close10(int a, int b) {
  if( Math.abs(a - 10) < Math.abs(b - 10)) return a; 
  else if( Math.abs(a - 10) > Math.abs(b - 10) )return b; 
  return 0;
}


in3050
public boolean in3050(int a, int b) {
  if(a >= 30 && a <= 40 && b <= 40 && b >= 30) return true;
  else if(a >= 40 && a <= 50 && b <= 50 && b >= 40 ) return true;
  return false;
}


max1020
public int max1020(int a, int b) {
  int max = a > b ? a : b ;
  if(max >= 10 && max <=20) return max;
  if(max > a && a>=10 && a<=20) return a; 
  if(max > b && b>=10 && b<=20) return b; 
  return 0;
}


stringE
public boolean stringE(String str) {
    int count = 0;
  for(char c : str.toCharArray()) { 
    if(c == 'e') count++;
  }
  return (count >= 1 && count <= 3);
}


lastDigit
public boolean lastDigit(int a, int b) {
  return (a%10 == b%10);
}


endUp
public String endUp(String str) {
   String s ;
  if(str.length() < 3 ) return str.toUpperCase();
  if(str.length() > 2 ) {
    s = str.substring(str.length()-3 ,str.length()).toUpperCase();
    return str.substring(0,str.length()-3)+s;
  }
  return "";
}


everyNth
public String everyNth(String str, int n) {
   String result = "";
   for(int i=0 ; i<str.length() ; i=i+n) result += str.charAt(i);
   return result;
}

