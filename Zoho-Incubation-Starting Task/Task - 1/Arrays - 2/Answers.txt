countEvens
public int countEvens(int[] nums) {
  int count = 0 ;
  for(int i : nums) {
    if(i%2 == 0 ) count++;
  } return count;
}


public int bigDiff(int[] nums) {
  int min = nums[0];
  int max = nums[0];
  for(int num : nums) {
    min = Math.min(min, num);
    max = Math.max(max, num);
  }
  return max - min;
}


centeredAverage
public int centeredAverage(int[] nums) {
  int min = nums[0];
  int max = nums[0];
  int sum = 0;
  for(int i : nums) {
    sum += i;
    min = Math.min(min,i);
    max = Math.max(max,i);
  }
  sum = sum - min - max ;
  return sum / (nums.length - 2);
}


sum13
public int sum13(int[] nums) {
  if(nums.length == 0) return 0;
  int sum = 0;
  for(int i=0 ; i<nums.length ; i++){
    if(nums[i] != 13) sum += nums[i];
    else i++;
  }
  return sum;
}



sum67
public int sum67(int[] nums) {
  int sum = 0;
  boolean found = false;
  for(int i=0 ; i<nums.length ; i++){
    if(nums[i] == 6) found = true;
    if(!found) sum += nums[i];
    if(nums[i] == 7) found = false;
  }
  return sum;
}


has22
public boolean has22(int[] nums) {
  if(nums.length < 2) return false;
  for(int i=1 ; i<nums.length ; i++) {
    if(nums[i-1] == 2 && nums[i] == 2) return true;
  }
  return false;
}


lucky13
public boolean lucky13(int[] nums) {
  for(int i=0 ; i<nums.length ; i++){
    if(nums[i] == 1 || nums[i] == 3) return false;
  }
  return true;
}


sum28
public boolean sum28(int[] nums) {
  int sum = 0;
  for(int i : nums){
    if(i == 2) sum += i;
  }
  return sum == 8;
}


more14
public boolean more14(int[] nums) {
  int count = 0;
  for(int i : nums){
    if(i == 1) count++;
    if(i == 4) count--;
  }
  return count > 0;
}


fizzArray
public int[] fizzArray(int n) {
  int arr[] = new int[n];
  for(int i=0 ; i<n ; i++) arr[i] = i;
  return arr;
}


only14
public boolean only14(int[] nums) {
  for(int i : nums) {
    if(i != 1 && i != 4) return false;
  }
  return true;
}


fizzArray2
public String[] fizzArray2(int n) {
  String[] arr = new String[n];
  for(int i=0 ; i<n ; i++) arr[i] = i+"";
  return arr;
}


no14
public boolean no14(int[] nums) {
  boolean found1 = false;
  boolean found4 = false;
  for (int i : nums) {
   if (i == 1) found1 = true;
   else if (i == 4) found4 = true;
  }
 return !(found1 && found4);
}


isEverywhere
public boolean isEverywhere(int[] nums, int val) {
  for(int i=1 ; i<nums.length ; i++){
    if(nums[i-1] != val && nums[i] != val) return false;; 
  }
  return true;
}


either24
public boolean either24(int[] nums) {
  boolean found2 = false;
  boolean found4 = false;
  for(int i=1 ; i<nums.length ; i++){
    if(nums[i-1] == nums[i]){
      if(nums[i] == 2) found2 = true;
      if(nums[i] == 4) found4 = true;
    }
  }
  return found2 != found4;
}


matchUp
public int matchUp(int[] nums1, int[] nums2) {
  int count = 0;
  for(int i=0 ; i<nums1.length ; i++){
    if((nums1[i] != nums2[i]) && (Math.abs(nums1[i] - nums2[i])) <= 2 ) count++;
  }
  return count;
}


has77
public boolean has77(int[] nums) {
  for(int i=1 ; i<nums.length ; i++){
    if( (nums[i-1]==7 && nums[i] == 7 ) || (i>1 && (nums[i-2] == 7 && nums[i] == 7))) return true;
  }
  return false;
}


has12
public boolean has12(int[] nums) {
  boolean found = false;
  for(int i=0 ; i<nums.length ; i++){
    if(nums[i] == 1) found = true;
    if(found && nums[i] == 2) return true;
  }
  return false;
}


modThree
public boolean modThree(int[] nums) {
  for(int i = 2 ; i<nums.length ; i++){
    if( ((nums[i-2]%2 != 0 && nums[i-1]%2 != 0) && nums[i]%2 != 0) ||
      ((nums[i-2]%2 == 0 && nums[i-1]%2 == 0) && nums[i]%2 == 0 ) ) return true;
  }
  return false;
}


haveThree
public boolean haveThree(int[] nums) {
  int count = 0;
  for (int i = 0; i < nums.length; i++) {
    if (nums[i] == 3) {
      count++;
      if (i > 0 && nums[i - 1] == 3) {
        return false;
      }
    }
  }
  return count == 3;
}


twoTwo
public boolean twoTwo(int[] nums) {
  if(nums.length == 1 && nums[0] == 2) return false;
  for(int i=0 ; i<nums.length ; i++){
    if(nums[i] == 2){
      if(i == nums.length-1){
        if(nums[i] == nums[i-1]) return true;
        return false;
      }
      if(nums[i+1] != 2) return false;
      i++;
    }
  }
  return true;
}


sameEnds
public boolean sameEnds(int[] nums, int len) {
  for(int i=0 ; i<len ; i++){
    if(nums[i] != nums[nums.length-len+i]) return false;
  }
  return true;
}


tripleUp
public boolean tripleUp(int[] nums) {
  for(int i=2 ; i<nums.length ; i++){
    if( (nums[i-2]+1 == nums[i-1] ) && nums[i-1]+1 == nums[i]) return true;
  }
  return false;
}


fizzArray3
public int[] fizzArray3(int start, int end) {
  int arr[] = new int[end-start];
  int val = start;
  for(int i=0 ; i<end-start ; i++) arr[i] = val++;
  return arr;
}


shiftLeft
public int[] shiftLeft(int[] nums) {
  if(nums.length == 0) return nums;
  int val = nums[0];
  for(int i=0 ; i<nums.length-1 ; i++){
    nums[i] = nums[i+1];
  }
  nums[nums.length-1] = val;
  return nums;
}


tenRun
public int[] tenRun(int[] nums) {
  int val = 0;
  boolean found = false;
  for(int i=0 ; i<nums.length ; i++){
    if(nums[i]%10 == 0){
      val = nums[i];
      found = true;
    } 
    if(found) nums[i] = val;
  }
  return nums;
}


pre4
public int[] pre4(int[] nums) {
  int i = 0;
  while (i < nums.length && nums[i] != 4) i++;
  return Arrays.copyOf(nums, i);
}


post4
public int[] post4(int[] nums) {
  int i = nums.length-1;
  while (i >= 0 && nums[i] != 4) i--;
  return Arrays.copyOfRange(nums,i+1,nums.length);
}


notAlone
public int[] notAlone(int[] nums, int val) {
  for(int i=1 ; i<nums.length-1 ; i++){
    if( nums[i] == val && nums[i-1] != val ){
      nums[i] = nums[i-1] < nums[i+1] ? nums[i+1] : nums[i-1];
    }
  }
  return nums;
}


zeroFront
public int[] zeroFront(int[] nums) {
 int j=0;
 for(int i=0 ; i<nums.length ; i++){
   if(nums[i] == 0){
      int temp = nums[i];
      nums[i] = nums[j];
      nums[j] = temp;
      j++;
   }
 }
 return nums;
}


withoutTen
public int[] withoutTen(int[] nums) {
  int j=0;
  for(int i=0 ; i<nums.length ; i++){
    if(nums[i] != 10){
      nums[j++] = nums[i];
    }
  }
  while(j<nums.length) nums[j++]=0;
  return nums;
}


zeroMax
public int[] zeroMax(int[] nums) {
  int max = 0;
  for(int i = nums.length-1 ; i>=0 ; i--){
    if(nums[i] % 2 != 0) max = Math.max(max,nums[i]);
    else if(nums[i] == 0 ) nums[i] = max;
  }
  return nums;
}


evenOdd
public int[] evenOdd(int[] nums) {
  int j=0;
  for(int i=0 ; i<nums.length ; i++){
    if(nums[i]%2 == 0){
      int temp = nums[j];
      nums[j] = nums[i];
      nums[i] = temp;
      j++;
    }
  }
  return nums;
}


fizzBuzz
public String[] fizzBuzz(int start, int end) {
  String arr[] = new String[end-start];;
  for(int i=0 ; i<arr.length ; i++){
    if( (start)%3 == 0 && (start)%5 == 0) arr[i] = "FizzBuzz";
    else if( (start)%3 == 0 ) arr[i] = "Fizz";
    else if( (start)%5 == 0 ) arr[i] = "Buzz";
    else arr[i] = (start)+"";
    start++;
  }
  return arr;
}


